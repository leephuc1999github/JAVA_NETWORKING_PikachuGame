/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Client;

import static Client.LoginClientView.user;
import Model.*;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.io.IOException;
import java.security.SecureRandom;
import java.sql.Date;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;

/**
 *
 * @author DELL
 */
public class HomeClientView extends javax.swing.JFrame implements inReceiveMessage {

    static ListenServer listenServer = null;

    public HomeClientView(ListenServer listenServer) {
        initComponents();
        setLocationRelativeTo(null);
        this.listenServer = listenServer;
        this.listenServer.receive = this;
        MenuUser.setText(user.getName());
    }

    private int rangeNameRoom() {
        return (new SecureRandom().nextInt(899) + 100);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        CreateRoom = new javax.swing.JButton();
        MyHistory = new javax.swing.JButton();
        Ranking = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        MenuUser = new javax.swing.JMenu();
        updateProfile = new javax.swing.JMenuItem();
        btnLogout = new javax.swing.JMenuItem();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Home");
        setAlwaysOnTop(true);
        setPreferredSize(new java.awt.Dimension(534, 408));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 153, 102));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Game Picachu");

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/pokemon.png"))); // NOI18N

        CreateRoom.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        CreateRoom.setText("Create Room");
        CreateRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateRoomActionPerformed(evt);
            }
        });

        MyHistory.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        MyHistory.setText("My History");
        MyHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MyHistoryActionPerformed(evt);
            }
        });

        Ranking.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        Ranking.setText("Ranking");
        Ranking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RankingActionPerformed(evt);
            }
        });

        MenuUser.setText("user");

        updateProfile.setText("Update Profile");
        updateProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateProfileActionPerformed(evt);
            }
        });
        MenuUser.add(updateProfile);

        btnLogout.setText("Logout");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });
        MenuUser.add(btnLogout);

        jMenuBar1.add(MenuUser);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(CreateRoom, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                            .addComponent(MyHistory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Ranking, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(1, 1, 1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(CreateRoom)
                .addGap(18, 18, 18)
                .addComponent(MyHistory)
                .addGap(18, 18, 18)
                .addComponent(Ranking)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 386, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CreateRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateRoomActionPerformed

        java.util.Date today = new java.util.Date();
        System.out.println(today);
        Room newRoom = new Room(rangeNameRoom(), today, "");
        User infoUserNeedCreateRoom = user;
        DataPackage requestCreateRoom = new DataPackage(infoUserNeedCreateRoom, "requestCreateRoom", new Gson().toJson(newRoom, Room.class));
        try {
            listenServer.SendMessage(requestCreateRoom);
        } catch (Exception e) {
        }

    }//GEN-LAST:event_CreateRoomActionPerformed

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        DataPackage requestLogout = new DataPackage(user, "requestLogout", new Gson().toJson(user, User.class));
        listenServer.SendMessage(requestLogout);
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void updateProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateProfileActionPerformed
        new UpdateProfileClientView(listenServer).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_updateProfileActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        DataPackage requestLogout = new DataPackage(user, "requestLogout", new Gson().toJson(user, User.class));
        listenServer.SendMessage(requestLogout);
    }//GEN-LAST:event_formWindowClosing

    private void RankingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RankingActionPerformed
        listenServer.SendMessage(new DataPackage(user, "requestGetRank", ""));
    }//GEN-LAST:event_RankingActionPerformed

    private void MyHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MyHistoryActionPerformed
        listenServer.SendMessage(new DataPackage(user, "requestGetHistory", ""));
    }//GEN-LAST:event_MyHistoryActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomeClientView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomeClientView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomeClientView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomeClientView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomeClientView(listenServer).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CreateRoom;
    private javax.swing.JMenu MenuUser;
    private javax.swing.JButton MyHistory;
    private javax.swing.JButton Ranking;
    private javax.swing.JMenuItem btnLogout;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem updateProfile;
    // End of variables declaration//GEN-END:variables

    @Override
    public void ReceiveMessage(DataPackage dataPackage) throws IOException {
        switch (dataPackage.getKey()) {
            case "respondHistory":
                ArrayList<String> data = new Gson().fromJson(dataPackage.getValue(), new TypeToken<ArrayList<String>>() {
                }.getType());
                new HistoryClientView(listenServer, data).setVisible(true);
                this.dispose();
                break;
            case "respondRank":
                ArrayList<User> result = new Gson().fromJson(dataPackage.getValue(), new TypeToken<ArrayList<User>>() {
                }.getType());
                new RankingClientView(listenServer, result).setVisible(true);
                this.dispose();
                break;
            case "respondLogout":
                if (dataPackage.getValue().equals("true")) {
                    new LoginClientView().setVisible(true);
                    this.dispose();
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Có lỗi xảy ra");
                }
                break;
            case "respondCreateRoom":
                Room newRoom = new Gson().fromJson(dataPackage.getValue(), Room.class);
                User_Game user_Game = new User_Game(user, null, newRoom, 0, 0);
                if (newRoom.getId() != 0) {
                    new RoomClientView(listenServer, user_Game, "bost").setVisible(true);
                    this.dispose();
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Có lỗi xảy ra");
                }
                break;
            case "respondInviteToGuest":
                System.out.println(dataPackage.getValue());
                
                User_Game infoRoom = new Gson().fromJson(dataPackage.getValue(), User_Game.class);
                if (infoRoom.getHoster().getId() != 0) {
                    int invite = JOptionPane.showConfirmDialog(rootPane, "Do you play with " + infoRoom.getHoster().getName() + " ?", "Confirm",
                            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                    switch (invite) {
                        case JOptionPane.NO_OPTION:
                            break;
                        case JOptionPane.YES_OPTION:
                            infoRoom.setGuest(user);
                            listenServer.SendMessage(new DataPackage(user, "requestJoinRoom", new Gson().toJson(infoRoom)));
                            new RoomClientView(listenServer, infoRoom, "guest").setVisible(true);
                            this.dispose();
                            break;
                        case JOptionPane.CLOSED_OPTION:
                            break;
                        default:
                            break;
                    }
                }
                break;
        }
    }
}
